name: Tagged Release CI

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SwiftLint
        run: brew install swiftlint

      - name: Install SwiftFormat
        run: brew install swiftformat

      - name: Run SwiftLint
        run: swiftlint lint --strict

      - name: Run SwiftFormat (check only)
        run: swiftformat --lint .

  build-and-test:
    name: Build and Test
    runs-on: macos-15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_26.0.app/Contents/Developer

      - name: Build
        run: swift build

      - name: Run tests
        run: swift test --enable-code-coverage

      - name: Generate coverage report
        run: |
          xcrun llvm-cov export \
            -format="lcov" \
            -instr-profile=.build/debug/codecov/default.profdata \
            .build/debug/DuprKitPackageTests.xctest/Contents/MacOS/DuprKitPackageTests \
            > coverage.lcov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.lcov
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  create-release:
    name: Create GitHub Release
    runs-on: macos-latest
    needs: [lint-and-format, build-and-test]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |
            Release version ${{ steps.get_version.outputs.VERSION }}
            
            ## Changes
            See commit history for details.
          draft: false
          prerelease: false